name: 🚀(DEV) Build | Deploy Gestión Express en Azure Web App

on:
  push:
    branches: [dev]
  workflow_dispatch:

jobs:
  build:
    name: 🏗️ (DEV) Construcción del paquete
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: 🔄 Clonar repositorio
        uses: actions/checkout@v4

      - name: 🐍 Configurar versión de Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.4"

      - name: 📥 Instalar dependencias (validación)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🧪 Verificar presencia de archivos clave
        run: |
          if [ ! -f main.py ]; then echo "❌ main.py no encontrado"; exit 1; fi
          if [ ! -f requirements.txt ]; then echo "❌ requirements.txt no encontrado"; exit 1; fi

      - name: 📦 Verificar archivos pesados > 5MB
        run: |
          echo "🔍 Archivos grandes en el repo (mayor a 5MB):"
          find . -type f -size +5M -exec du -h {} + | sort -hr | head -n 20 || echo "Sin archivos grandes"

      - name: 📦 Instalar 'tree' si no existe
        run: |
          if ! command -v tree &> /dev/null; then
            sudo apt update && sudo apt install tree -y
          fi

      - name: 🧹 Preparar carpeta de despliegue limpia
        run: |
          rm -rf deployment
          mkdir deployment
          cp -r *.py requirements.txt controller model view static lib deployment/ 2>/dev/null || true
          # Eliminar carpetas y archivos innecesarios
          find deployment -type d -name '__pycache__' -exec rm -rf {} +
          find deployment -type f \( -name '*.npy' -o -name '*.zip' -o -name '*.tar.gz' \) -exec rm -f {} +

      - name: 📂 Mostrar estructura final a desplegar
        run: |
          echo "🗂️ Contenido en /deployment listo para Azure:"
          tree -L 3 deployment || ls -R deployment

      - name: ☁️ Subir artefacto limpio (sin comprimir)
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: deployment

  deploy:
    name: 🚀 (DEV) Despliegue en Azure Web App
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: 📥 Descargar artefacto limpio
        uses: actions/download-artifact@v4
        with:
          name: python-app
          path: artifact_temp

      - name: 📂 Mover archivos descargados al directorio esperado
        run: |
          rm -rf deployment
          mkdir deployment
          cp -r artifact_temp/* deployment/
          echo "📦 Contenido movido a /deployment:"
          ls -R deployment

      - name: 📦 Instalar 'tree' si no existe
        run: |
          if ! command -v tree &> /dev/null; then
            sudo apt update && sudo apt install tree -y
          fi

      - name: 📁 Mostrar contenido recibido
        run: |
          echo "🧾 Contenido recibido para despliegue:"
          tree -L 2 || ls -R

      - name: 🔐 Iniciar sesión en Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_15A57A74A6AF4FCDBAC6C55D19CD4DDC }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_C1AE82DC672A4EB7BB8059EC8C400D8E }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_5E8DECC7B07E4CD7B20A6F8A68B5226A }}

      - name: 👤 Diagnóstico cuenta
        run: az account show

      - name: ⚙️ Establecer comando de inicio (gunicorn)
        run: |
          az webapp config set --name gestionconsorcioexpress2 \
            --resource-group db_gestionexpress \
            --startup-file "gunicorn main:app --workers 4 --bind=0.0.0.0 --timeout 600"

      - name: 🔁 Reiniciar Web App antes del despliegue (previene error 409)
        run: |
          az webapp restart --name gestionconsorcioexpress2 --resource-group db_gestionexpress

      - name: 🚀 Desplegar en Azure App Service (desde carpeta)
        uses: azure/webapps-deploy@v3
        with:
          app-name: "gestionconsorcioexpress2"
          slot-name: "Production"
          package: ./deployment

      - name: 🧪 Verificar que el sitio responda (200 OK)
        run: |
          echo "⌛ Esperando 15 segundos a que la app se levante..."
          sleep 15
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://gestionconsorcioexpress2.azurewebsites.net)
          if [ "$STATUS" != "200" ]; then
            echo "❌ Sitio no responde correctamente (HTTP $STATUS)" && exit 1
          else
            echo "✅ Sitio activo y funcional (HTTP 200)"
          fi

      - name: 🧾 Si falla, sugerencia de logs Kudu
        if: failure()
        run: |
          echo "❌ El despliegue falló. Revisa logs en:"
          echo "🔗 https://gestionconsorcioexpress2.scm.azurewebsites.net/api/logs/docker"
          echo "🔗 https://gestionconsorcioexpress2.scm.azurewebsites.net/api/vfs/LogFiles/"
